package net.studykeeper;

import java.util.concurrent.TimeUnit;

public class StudyTime {

	private final long startTimeInMillis;

	private StudyTime(long startTimeInMillis) {
		this.startTimeInMillis = startTimeInMillis;
	}

	public static StudyTime start() {
		return new StudyTime(System.currentTimeMillis());
	}

	public StudyTimeDuration duration() {
		return new StudyTimeDuration(startTimeInMillis, System.currentTimeMillis());
	}
	
	public static class StudyTimeDuration {
		private final long startTimeInMillis;
		private final long stopTimeInMillis;

		public StudyTimeDuration(Builder builder) {
			this.startTimeInMillis = builder.startTimeInMillis;
			this.stopTimeInMillis = System.currentTimeMillis();
		}
		
		public StudyTimeDuration(long startTimeInMillis, long stopTimeInMillis) {
			this.startTimeInMillis = startTimeInMillis;
			this.stopTimeInMillis = stopTimeInMillis;
		}

		public long getStartTimeInMillis() {
			return startTimeInMillis;
		}

		public long getStopTimeInMillis() {
			return stopTimeInMillis;
		}

		private long duration() {
			return System.currentTimeMillis() - startTimeInMillis;
		}

		/**
		 * Convert duration to {MINUTES}:{SECONDS}
		 * */
		public String durationString() {
			long duration = duration();
			long durationInMinutes = TimeUnit.MILLISECONDS.toMinutes(duration);
			long durationInSeconds = TimeUnit.MILLISECONDS.toSeconds(duration - TimeUnit.MINUTES.toMillis(durationInMinutes));
			return leftFillZero(durationInMinutes) + ":" + leftFillZero(durationInSeconds);
		}

		private String leftFillZero(long duration) {
			if ( duration < 10 ) {
				return "0" + duration;
			}
			return String.valueOf(duration);
		}

		static class Builder {
			private long startTimeInMillis;
			
			public Builder startTimeInMillis(long startTimeInMillis) {
				this.startTimeInMillis = startTimeInMillis;
				return this;
			}

			public StudyTimeDuration build() {
				return new StudyTimeDuration(this);
			}
		}
		
	}

}
